# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.7

jobs:
  build:
    docker:
      - image: cimg/node:16.14.2
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${CURRENT_BRANCH}
      - restore_cache:
          keys:
            - app-{{ checksum "package.json" }}
            - app-
      - run:
          name: Install yarn
          command: npm install -g yarn
      - run:
          name: Install dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json" }}
  deploy-to-aws-s3:
    docker:
      - image: cimg/node:16.14.2
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Show current branch
          command: echo ${{CURRENT_BRANCH}}
      - run:
          name: Installing AWS CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install -y awscli
            sudo apt-get install -y python-pip python-dev build-essential
      - run:
          name: Build project
          command: |
            npm install
            npm run build
            cd build
            zip ../build.zip -r * .[^.]*
            echo "Build successful"
      - run:
          name: Deploye to AWS S3
          command: |
            if ["${CURRENT_BRANCH}" == "master"]
            then
              aws --region ${AWS_REGION} S3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif ["${CURRENT_BRANCH} == "staging"]\
            then
              aws --region ${AWS_REGION} S3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            else
              aws --region ${AWS_REGION} S3 sync ~/repo/build s3://${AWS_DEB_BUCKET} --delete
            fi

deploy-to-aws-cloudfront:
  docker:
    - image: cimg/node:16.14.2
  working_directory: ~/repo
  steps:
    - checkout
    - run:
        name: Show current branch
        command: echo ${{CURRENT_BRANCH}}
    - run:
        name: Installing AWS CLI
        working_directory: /
        command: |
          sudo apt-get -y -qq update
          sudo apt-get install -y awscli
          sudo apt-get install -y python-pip python-dev build-essential
    - run:
        name: Build project
        command: |
          npm install
          npm run build
          cd build
          zip ../build.zip -r * .[^.]*
          echo "Build successful"
    - run:
        name: Deploye to AWS Cloudfront
        command: |
          aws configure set preview.cloudfront
          if ["${CURRENT_BRANCH}" == "master"]
          then
            aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
          elif ["${CURRENT_BRANCH} == "staging"]\
          then
            aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
          else
            aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
          fi

workflows:
  build_deploy:
    jobs:
      - build
      - deploy-to-aws-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - dev
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - dev
